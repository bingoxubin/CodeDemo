package com.bingoabin.callback.test2;

/**
 * @author xubin34
 * @date 2021/7/20 10:31 上午
 */
//总经理出差前要你去办件事情，这件事情通过doSomething告诉你了，事情要是办完了就打总经理的电话phoneCall通知他一声。
// 这里的phoneCall我们就称为回调方法，为什么称之为回调呢？你问我我也不清楚哈~这你得问Sun公司了，不过我们从代码的执行过程可以看出数据的
// 流向大致是Manager—–>Personnel—–>Manager，这不就是一个“回调”的过程么？现在我们来总结下满足回调的两个基本条件：
// 1.Class A调用Class B中的X方法
// 2.ClassB中X方法执行的过程中调用Class A中的Y方法完成回调
//
// 一切看上去都很完美~以上例子代码简单通俗地描述了回调，但是这里我就会有这样一个疑问：
// 假设总经理出差前交了件事情给我去办，不巧……副总经理也要给我件事去办，更无耻的是……
// 主管也发任务过来了，都要求说做完就打电话通知他们……
// 这时我们就要定义更多类，什么总经理类啦~经理类啦~主管类啦~杂七杂八的类，但是这些杂七杂八的大爷们都要求做完事情就电话通知，
// 每个类都会有一个类似phoneCall的方法作为回调方法，这时，我们利用面向对象的思想来看~
// 是不是可以把这个回调方法抽象出来作为一个独立的抽象类或接口呢？多态的思想油然而生~~~
// 鉴于JAVA接口的好处，我们就定义一个名为CallBack的接口作为回调接口，再在该接口下定义一个名为backResult的抽象方法作为回调方法，
// 让那些总经理类啦~经理类啦~主管类啦~什么的都去实现该接口，这时候我们就来改造下我们的项目
public class Test {
	public static void main(String[] args) {
		// 首先我们需要一个员工
		Employee employee = new Employee();
		// 其次把这个员工指派给总经理
		Manager manager = new Manager(employee);
	}
}
